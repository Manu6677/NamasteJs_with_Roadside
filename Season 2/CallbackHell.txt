Callback Hell or Pyramid of doom

const cart = ["shoe", "pant", "watch"]

api.createOrder(cart, function(){
 
    api.proceedToPayment(function (){
     
     api.createOrderSummary()
});
})

// This is called Callback Hell or Pyramid of doom where one callback depend on another
--> Callback are powerfull way of handle asynchronous opartions in JS, asynchronous programming exist b/c of callback
--> "Two issues while using callbacks" :

      1 - Callback hell
         When a function is passed as an argument to another function, it becomes a callback function. This process continues and there are many callbacks inside another's Callback function.
         This grows the code horizontally instead of vertically. That mechanism is known as callback hell. 

      2 - Inversion of control
         The callback function is passed to another callback, this way we lose the control of our code. We don't know what is happening behind the scene and the program becomes very difficult to maintain. 
         That process is called inversion of control. 
       -> Here we are blindly trusting the api of createOrder and to excute the proceedToPayment
          and similary here we are blindly trusting api of proceedToPayment to call api of createOrderSummary
          what if there is a bugs in code of these API's 