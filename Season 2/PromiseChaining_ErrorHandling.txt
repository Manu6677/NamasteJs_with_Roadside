// We Will create a Promise Now...

Theory :: Remember, always handle error in promises and during a promise chaining...
          We can shift catch upwards also, suppose we want to execute the proccedToPayment()
          no matter cart is valid or not then we shift catch upside of callback proccedToPayment()
          and Keep in Mind we attach callback with promise object to avoid callback hell

const cart = ["shoes", "pants", "kurta"];

const promise = createOrder(cart); // this promise return orderId
console.log(promise);

promise
  .then(function (orderId) {
    console.log(orderId);
    return orderId;
  })
  .then(function (orderId) {
    return proccedToPayment(orderId);
  })
  .then(function (paymentInfo) {
    console.log(paymentInfo);
  })
  .catch(function (err) {
    console.log(err.message);
  });

//=> Now we will create a Promise of createorder (Producer part it will return a promise)

function createOrder(cart) {
  const pr = new Promise(function (resolve, reject) {
    // createOrder
    // validateCart
    // orderId (dena on success pr wrna error throw)

    // validate hai toh reolve dena
    if (!validateCart(cart)) {
      const err = new Error("Cart is not valid");
      reject(err);
    }

    // logic for createOrder if every thing is good then return "OrderId"
    const orderId = "1234";
    if (orderId) {
      setTimeout(function () {
        resolve(orderId);
      }, 4000);
    }
  });

  return pr;
}

function proccedToPayment(paymentInfo) {
  return new Promise(function (resolve, reject) {
    resolve("Successful payment");
  });
}

function validateCart(cart) {
  return true;
}
