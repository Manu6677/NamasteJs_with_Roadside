 Temporal deadzone is a time since when this let was hoisted till it initialized some value, Time between it called temporal dead zone
  - When you initialized the temporal dead zone ends and reference error will gone (can acces before initialization)
 
    Let:
    -Syntax error comes when you do a duplication (with let and const), it says already declared
     - let ko phle declare krlo then baad m b initialize kr skte hai
      
      const:
      - Const is even more strict than the let it need to be initialized when declared and like let baad m nhi kr skte initialize
 
==> Best way to avoid TDZ is to push all declaration and initialization on top so tTDZ shrinks to zero
     -after declaration and initialization on top logic part start

Things learned:
1. let and const are hoisted but its memory is allocated at other place than window which cannot be accessed before initialisation.
2. Temporal Dead Zone exists until variable is declared and assigned a value.
3. window.variable OR this.variable will not give value of variable defined using let or const.
4. We cannot redeclare the same variable with let/const(even with using var the second time).
5. const variable declaration and initialisation must be done on the same line.
6. There are three types of error: [1] referenceError {given where variable does not have memory allocation} [2] typeError {given when we change type that is not supposed to be changed} [3] syntaxError {when proper syntax(way of writing a statement) is not used}.
7. Use const wherever possible followed by let, Use var as little as possible(only if you have to). It helps avoid error.
8. Initialising variables at the top is good idea, helps shrinks TDZ to zero.
 
